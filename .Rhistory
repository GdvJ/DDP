navbarPage("LEGO Set Visualizer",
# multi-page user-interface that includes a navigation bar.
tabPanel("Explore the Data",
sidebarPanel(
sliderInput("timeline",
"Timeline:",
min = 1950,
max = 2016,
value = c(1996, 2014)),
sliderInput("pieces",
"Number of Pieces:",
min = -1,
max = 5922,
value = c(271, 2448)
),
#format = "####"),
uiOutput("themesControl"), # the id
actionButton(inputId = "clearAll",
label = "Clear selection",
icon = icon("square-o")),
actionButton(inputId = "selectAll",
label = "Select all",
icon = icon("check-square-o"))
),
mainPanel(
tabsetPanel(
# Data
tabPanel(p(icon("table"), "Dataset"),
dataTableOutput(outputId="dTable")
), # end of "Dataset" tab panel
tabPanel(p(icon("line-chart"), "Visualize the Data"),
h4('Number of Sets by Year', align = "center"),
h5('Please hover over each point to see the Year and Total Number of Sets.',
align ="center"),
showOutput("setsByYear", "nvd3"),
h4('Number of Themes by Year', align = "center"),
h5('Please hover over each bar to see the Year and Total Number of Themes.',
align ="center"),
showOutput("themesByYear", "nvd3"),
h4('Number of Pieces by Year', align = "center"),
h5('Please hover over each point to see the Set Name, ID and Theme.',
align ="center"),
showOutput("piecesByYear", "nvd3"),
h4('Number of Average Pieces by Year', align = "center"),
showOutput("piecesByYearAvg", "nvd3"),
h4('Number of Average Pieces by Theme', align = "center"),
showOutput("piecesByThemeAvg", "nvd3")
) # end of "Visualize the Data" tab panel
)
)
), # end of "Explore Dataset" tab panel
tabPanel(p(icon("search"), "LookUp on Brickset Website"),
mainPanel(
h4("The page popped-up is the LEGO set database on Brickset.com."),
h4("Step 1. Please type the Set ID below and press the 'Go!' button:"),
textInput(inputId="setid", label = "Input Set ID"),
#p('Output Set ID:'),
#textOutput('setid'),
actionButton("goButtonAdd", "Go!"),
h5('Output Address:'),
textOutput("address"),
p(""),
h4("Step 2. Please click the button below.
The link to the Set's page is being generated."),
p(""),
actionButton("goButtonDirect", "Generate Link Below!"),
p(""),
htmlOutput("inc"),
p("I was supposed to show you in an iframe below. However, it only
worked on localhost and has security issue after deployed to the cloud. Ooops...")
)
),
tabPanel("About",
mainPanel(
includeMarkdown("about.md")
)
) # end of "About" tab panel
)
)
library(shiny)
# Load data processing file
source("data_processing.R")
themes <- sort(unique(data$theme))
# Shiny server
shinyServer(
function(input, output) {
output$setid <- renderText({input$setid})
output$address <- renderText({
input$goButtonAdd
isolate(paste("http://brickset.com/sets/",
input$setid, sep=""))
})
#     getPage<-function(url) {
#         return(tags$iframe(src = url,
#                            style="width:100%;",
#                            frameborder="0", id="iframe",
#                            height = "500px"))
#     }
openPage <- function(url) {
return(tags$a(href=url, "Click here!", target="_blank"))
}
output$inc <- renderUI({
input$goButtonDirect
isolate(openPage(paste("http://brickset.com/sets/",
input$setid, sep="")))
## Can't open iframe below
# Got This request has been blocked;
# the content must be served over HTTPS error msg
# Mixed Content: The page at 'https://xiaodan.shinyapps.io/LegoDatasetVisualization/'
# was loaded over HTTPS, but requested an insecure resource 'http://brickset.com/sets/'.
# This request has been blocked; the content must be served over HTTPS.
#isolate(getPage(paste("//brickset.com/sets/",
#                       input$setid, sep="")))
})
# Initialize reactive values
values <- reactiveValues()
values$themes <- themes
# Create event type checkbox
output$themesControl <- renderUI({
checkboxGroupInput('themes', 'LEGO Themes:',
themes, selected = values$themes)
})
# Add observer on select-all button
observe({
if(input$selectAll == 0) return()
values$themes <- themes
})
# Add observer on clear-all button
observe({
if(input$clearAll == 0) return()
values$themes <- c() # empty list
})
# Prepare dataset
dataTable <- reactive({
groupByTheme(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
dataTableBySetYear <- reactive({
groupByYearSet(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
dataTableByYear <- reactive({
groupByYearAgg(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
dataTableByPiece <- reactive({
groupByYearAll(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
dataTableByPieceAvg <- reactive({
groupByPieceAvg(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
dataTableByPieceThemeAvg <- reactive({
groupByPieceThemeAvg(data, input$timeline[1],
input$timeline[2], input$pieces[1],
input$pieces[2], input$themes)
})
# Render data table
output$dTable <- renderDataTable({
dataTable()
} #, options = list(bFilter = FALSE, iDisplayLength = 50)
)
output$setsByYear <- renderChart({
plotSetsCountByYear(dataTableBySetYear())
})
output$themesByYear <- renderChart({
plotThemesCountByYear(dataTableByYear())
})
output$piecesByYear <- renderChart({
plotPiecesByYear(dataTableByPiece())
})
output$piecesByYearAvg <- renderChart({
plotPiecesByYearAvg(dataTableByPieceAvg())
})
output$piecesByThemeAvg <- renderChart({
plotPiecesByThemeAvg(dataTableByPieceThemeAvg())
})
} # end of function(input, output)
)
## Clear memory
rm(list=ls())
## Load package
##library(shiny)
##shinyUI
library(shiny)
library(BH)
library(rCharts)
require(markdown)
require(data.table)
library(dplyr)
library(DT)
shinyUI(
navbarPage("LEGO Set Visualizer",
# multi-page user-interface that includes a navigation bar.
tabPanel("Explore the Data",
sidebarPanel(
sliderInput("timeline",
"Timeline:",
min = 1950,
max = 2016,
value = c(1996, 2014)),
sliderInput("pieces",
"Number of Pieces:",
min = -1,
max = 5922,
value = c(271, 2448)
),
#format = "####"),
uiOutput("themesControl"), # the id
actionButton(inputId = "clearAll",
label = "Clear selection",
icon = icon("square-o")),
actionButton(inputId = "selectAll",
label = "Select all",
icon = icon("check-square-o"))
),
mainPanel(
tabsetPanel(
# Data
tabPanel(p(icon("table"), "Dataset"),
dataTableOutput(outputId="dTable")
), # end of "Dataset" tab panel
tabPanel(p(icon("line-chart"), "Visualize the Data"),
h4('Number of Sets by Year', align = "center"),
h5('Please hover over each point to see the Year and Total Number of Sets.',
align ="center"),
showOutput("setsByYear", "nvd3"),
h4('Number of Themes by Year', align = "center"),
h5('Please hover over each bar to see the Year and Total Number of Themes.',
align ="center"),
showOutput("themesByYear", "nvd3"),
h4('Number of Pieces by Year', align = "center"),
h5('Please hover over each point to see the Set Name, ID and Theme.',
align ="center"),
showOutput("piecesByYear", "nvd3"),
h4('Number of Average Pieces by Year', align = "center"),
showOutput("piecesByYearAvg", "nvd3"),
h4('Number of Average Pieces by Theme', align = "center"),
showOutput("piecesByThemeAvg", "nvd3")
) # end of "Visualize the Data" tab panel
)
)
), # end of "Explore Dataset" tab panel
tabPanel(p(icon("search"), "LookUp on Brickset Website"),
mainPanel(
h4("The page popped-up is the LEGO set database on Brickset.com."),
h4("Step 1. Please type the Set ID below and press the 'Go!' button:"),
textInput(inputId="setid", label = "Input Set ID"),
#p('Output Set ID:'),
#textOutput('setid'),
actionButton("goButtonAdd", "Go!"),
h5('Output Address:'),
textOutput("address"),
p(""),
h4("Step 2. Please click the button below.
The link to the Set's page is being generated."),
p(""),
actionButton("goButtonDirect", "Generate Link Below!"),
p(""),
htmlOutput("inc"),
p("I was supposed to show you in an iframe below. However, it only
worked on localhost and has security issue after deployed to the cloud. Ooops...")
)
),
tabPanel("About",
mainPanel(
includeMarkdown("about.md")
)
) # end of "About" tab panel
)
)
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(
navbarPage("Project",
# multi-page user-interface that includes a navigation bar.
tabPanel("Explore the Data",
sidebarPanel(
sliderInput("pieces",
"Number of x1 resources:",
min = 1950,
max = 2016,
value = c(1996, 2014)),
sliderInput("pieces",
"Number of x2 resources:",
min = -1,
max = 5922,
value = c(271, 2448)
),
#format = "####"),
uiOutput("themesControl"), # the id
actionButton(inputId = "clearAll",
label = "Clear selection",
icon = icon("square-o")),
actionButton(inputId = "selectAll",
label = "Select all",
icon = icon("check-square-o"))
),
mainPanel(
)
)
)
)
)
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(
navbarPage("Project",
# multi-page user-interface that includes a navigation bar.
tabPanel("Explore the Data",
sidebarPanel(
sliderInput("pieces",
"Number of x1 resources:",
min = 1950,
max = 2016,
value = c(1996, 2014)),
sliderInput("pieces",
"Number of x2 resources:",
min = -1,
max = 5922,
value = c(271, 2448)
),
#format = "####"),
uiOutput("themesControl"), # the id
actionButton(inputId = "clearAll",
label = "Clear selection",
icon = icon("square-o")),
actionButton(inputId = "selectAll",
label = "Select all",
icon = icon("check-square-o"))
),
mainPanel(
)
)
)
)
shinyUI(fluidpage(
#Title
titlePanel(),
sidebarPanel(),
mainPanel()
))
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(fluidpage(
#Title
titlePanel(),
sidebarPanel(),
mainPanel()
))
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(fluidPage(
#Title
titlePanel(),
sidebarPanel(),
mainPanel()
))
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(fluidPage(
#Title
titlePanel("Resource allocation"),
sidebarPanel(),
mainPanel()
))
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
A = array(c(1,2,3,4, 5, 6, dim=c(3,2))
A
A = array(c(1,2,3,4, 5, 6), dim=c(3,2))
A
A = array(c(1,2,3,4, 5, 6), dim=c(2,3))
A
shiny::runApp('~/Coursera/DDP')
A = array(c(1,2,3,4, 5, 6), dim=c(2,3))
B = c(3,4)
result = solve(A,B)
result
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
## Clear memory
rm(list=ls())
## Load package
library(shiny)
shinyUI(fluidPage(
#Title
titlePanel("Linear equation solver"),
sidebarPanel(
numericInput("numA1",
label = "Value for a1",
value = 2)
,
numericInput("numB1",
label = "Value for b1",
value = 4)
,
numericInput("numC1",
label = "Value for c1",
value = 5)
,
numericInput("numA2",
label = "Value for a2",
value = 2)
,
numericInput("numB2",
label = "Value for b2",
value = 4)
,
numericInput("numC2",
label = "Value for c2",
value = 5)
,
numericInput("numY",
label = "Value for Y",
value = 5)
,
numericInput("numZ",
label = "Value for Z",
value = 5)
,
numericInput("numA3",
label = "Value for a3",
value = 2)
,
numericInput("numB3",
label = "Value for b3",
value = 4)
,
numericInput("numC3",
label = "Value for c3",
value = 5)
,
numericInput("numW",
label = "Value for W",
value = 5)
),
mainPanel("Solving a system of three equations of the form"), <br>,
("a1x1 + b1x2 + c1x3 = Y,"), <br>,
("a2x1 + b2x2 + c2x3 = Z,"), <br>,
("a3x1 + b3x2 + c3x3 = W,")
))
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
result
shiny::runApp('~/Coursera/DDP')
A = array(c(1,2,3,4,5,6,7,8,9), dim=c(3,3))
B = c(3,4,5)
result = solve(A,B)
result
A = array(c(1,2,2,4,5,6,7,8,9), dim=c(3,3))
B = c(3,4,1)
result = solve(A,B)
result
shiny::runApp('~/Coursera/DDP')
result[1,]
result[1]
result[2]
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
A = array(c(1,2,2,4,5,6,7,8,9), dim=c(3,3))
B = c(3,4,1)
result = solve(A,B)
result
result[1]
result[2]
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
shiny::runApp('~/Coursera/DDP')
install.packages("quantmod")
shiny::runApp('~/Coursera/DDP')
